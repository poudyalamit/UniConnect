{
  "language": "Solidity",
  "sources": {
    "contracts/ForumNFT.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAsset.sol\";\n\ncontract ForumNFT is  LSP7DigitalAsset {\n\n    struct Comment {\n      string cid;\n      address commentor;\n      uint256 id;\n    }\n\n    struct Post {\n      string cid;\n      address author;\n      address[] likes;\n      Comment[] comments;\n      uint256 id;\n    }\n\n    Post latestPost;\n    address[] private emptyLikesArr;\n    Comment[] private emptyCommentsArr;\n    Comment[] private tempCommentsArr; //used for comments deleting since we cannot pop struct's arrays\n    uint[] public postsIds;\n\n    mapping(uint256 => Post) public postByTokenId;\n\n    uint256 private postsCounter;\n    uint256 private commentsCounter;\n\n    address private admin;\n\n    constructor(\n      string memory _name,\n      string memory _symbol,\n      address _newOwner,\n      bool _isNFT\n    ) LSP7DigitalAsset(_name, _symbol, _newOwner, _isNFT) {\n      admin = _newOwner;\n    }\n\n    modifier onlyAdmin {\n      require(msg.sender == admin);\n      _;\n    }\n\n\n    //POSTS FUNCTIONS\n    function createPost(string calldata _cid) public {\n\n      latestPost.cid = _cid;\n      latestPost.author = msg.sender;\n      latestPost.likes = emptyLikesArr;\n      latestPost.id = ++postsCounter;\n\n      postByTokenId[postsCounter] = latestPost;\n      postsIds.push(postsCounter);\n\n      _mint(msg.sender, postsCounter, true, \"\");\n    }\n\n    function editPost(uint256 _tokenId, string calldata _cid) public {\n      require(postByTokenId[_tokenId].author == msg.sender, 'Only author can edit post');\n      postByTokenId[_tokenId].cid = _cid;\n    }\n\n    function deletePost(uint256 _tokenId) public {\n      require(postByTokenId[_tokenId].author == msg.sender\n        || admin == msg.sender, 'author or admin can delete post');\n\n      uint256[] memory postsList = postsIds;\n      uint256 totalPosts = postsList.length;\n      uint256 postIndex;\n      for (uint256 i = 0; i < totalPosts;) {\n        if (postsList[i] == _tokenId) {\n          postIndex = i;\n          break;\n        }\n        unchecked {++i;}\n      }\n\n      for(uint i = postIndex; i < totalPosts-1;){\n        postsList[i] = postsList[i+1];\n        unchecked {++i;}\n      }\n      postsIds = postsList;\n      postsIds.pop();\n    }\n\n    function fetchPosts() public view returns (Post[] memory posts, uint256, uint256, address) {\n\n      uint256 postsLength = postsIds.length;\n      uint256[] memory postArray = postsIds;\n      posts = new Post[](postsLength);\n\n      for (uint i = 0; i < postsLength;) {\n        posts[i] = postByTokenId[postArray[i]];\n        unchecked {++i;}\n      }\n\n      return (posts, postsCounter, commentsCounter, admin);\n    }\n\n    //COMMENTS FUNCTIONS\n    function createComment(uint256 _tokenId, string calldata _cid) public {\n\n      Comment memory comment = Comment({\n        cid: _cid,\n        commentor: msg.sender,\n        id: ++commentsCounter\n      });\n      postByTokenId[_tokenId].comments.push(comment);\n    }\n\n    function _postCommentor(uint256 _tokenId, uint256 _commentId) internal view returns(address commentor) {\n\n      for(uint i = 0; i < postByTokenId[_tokenId].comments.length;) {\n        if(postByTokenId[_tokenId].comments[i].id == _commentId) {\n          commentor = postByTokenId[_tokenId].comments[i].commentor;\n          break;\n        }\n        unchecked {++i;}\n      }\n      return commentor;\n    }\n\n    //cant pop structs so have to build new array of structs without the value to delete\n    //this function is really unoptimized but it works in the meantime copyof opcode is introduced\n    function removeComment(uint256 _tokenId, uint256 _commentId) public {\n      require(postByTokenId[_tokenId].author == msg.sender ||\n       _postCommentor(_tokenId,_commentId) == msg.sender ||\n       admin == msg.sender,\n       'Only post author or commentor can remove comment');\n\n       Comment[] memory comments = postByTokenId[_tokenId].comments;\n       uint256 totalComments = comments.length;\n\n      if(totalComments == 1){\n        postByTokenId[_tokenId].comments = emptyCommentsArr;\n      } else {\n\n        tempCommentsArr = emptyCommentsArr;\n        for (uint256 i = 0; i < totalComments;) {\n          if (comments[i].id != _commentId) {\n            tempCommentsArr.push(postByTokenId[_tokenId].comments[i]);\n          }\n          unchecked {++i;}\n        }\n        postByTokenId[_tokenId].comments = tempCommentsArr;\n      }\n    }\n\n    function fetchComments(uint256 _tokenId) public view returns (Comment[] memory comments) {\n\n      uint256 commentsLength = postByTokenId[_tokenId].comments.length;\n      Comment[] memory commentArray = postByTokenId[_tokenId].comments;\n      comments = new Comment[](commentsLength);\n\n      for (uint i = 0; i < commentsLength;) {\n        comments[i] = commentArray[i];\n        unchecked {++i;}\n      }\n\n      return comments;\n    }\n\n    //LIKES FUNCTION\n    function like(uint256 _tokenId) public {\n\n      address[] memory likesList = postByTokenId[_tokenId].likes;\n      uint totalLikes = likesList.length;\n      bool hasLiked = false;\n      uint256 likeIndex = 0;\n      for(uint i = 0; i < totalLikes;) {\n        if(postByTokenId[_tokenId].likes[i] == msg.sender) {\n          hasLiked = true;\n          likeIndex = i;\n          break;\n        }\n        unchecked {++i;}\n      }\n\n      //if like index is 0 then add msg.sender to likes array\n      if(!hasLiked){\n        postByTokenId[_tokenId].likes.push(msg.sender);\n      } else {\n        //if like index is not 0 then remove msg.sender from likes array\n        for(uint i = likeIndex; i < totalLikes-1;) {\n          likesList[i] = likesList[i+1];\n          unchecked {++i;}\n        }\n        postByTokenId[_tokenId].likes = likesList;\n        postByTokenId[_tokenId].likes.pop();\n      }\n    }\n\n    function fetchLikes(uint256 _tokenId) public view returns (address[] memory likes) {\n      likes = postByTokenId[_tokenId].likes;\n      return likes;\n    }\n\n    //ADMIN FUNCTION\n    function changeAdmin(address _newAdmin) public onlyAdmin {\n      admin = _newAdmin;\n    }\n\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAsset.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n// modules\nimport {ERC725YCore} from \"@erc725/smart-contracts/contracts/ERC725YCore.sol\";\nimport {LSP4DigitalAssetMetadata} from \"../LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol\";\nimport {LSP7DigitalAssetCore} from \"./LSP7DigitalAssetCore.sol\";\n\n// constants\nimport {_INTERFACEID_LSP7} from \"./LSP7Constants.sol\";\n\n/**\n * @title LSP7DigitalAsset contract\n * @author Matthew Stevens\n * @dev Implementation of a LSP7 compliant contract.\n *\n * This implementation is agnostic to the way tokens are created.\n * A supply mechanism has to be added in a derived contract using {_mint}\n * For a generic mechanism, see {LSP7Mintable}.\n */\ncontract LSP7DigitalAsset is LSP4DigitalAssetMetadata, LSP7DigitalAssetCore {\n    /**\n     * @notice Sets the token-Metadata\n     * @param name_ The name of the token\n     * @param symbol_ The symbol of the token\n     * @param newOwner_ The owner of the the token-Metadata\n     * @param isNFT_ Specify if the LSP7 token is a fungible or non-fungible token\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address newOwner_,\n        bool isNFT_\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_) {\n        _isNFT = isNFT_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC725YCore)\n        returns (bool)\n    {\n        return interfaceId == _INTERFACEID_LSP7 || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@erc725/smart-contracts/contracts/ERC725YCore.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725Y} from \"./interfaces/IERC725Y.sol\";\n\n// libraries\nimport {GasLib} from \"./utils/GasLib.sol\";\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\n\n// constants\nimport {_INTERFACEID_ERC725Y} from \"./constants.sol\";\n\n/**\n * @title Core implementation of ERC725Y General data key/value store\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\n * from/to the contract storage\n */\nabstract contract ERC725YCore is OwnableUnset, ERC165, IERC725Y {\n    /**\n     * @dev Map the dataKeys to their dataValues\n     */\n    mapping(bytes32 => bytes) internal store;\n\n    /* Public functions */\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getData(bytes32 dataKey)\n        public\n        view\n        virtual\n        override\n        returns (bytes memory dataValue)\n    {\n        dataValue = _getData(dataKey);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function getData(bytes32[] memory dataKeys)\n        public\n        view\n        virtual\n        override\n        returns (bytes[] memory dataValues)\n    {\n        dataValues = new bytes[](dataKeys.length);\n\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\n            dataValues[i] = _getData(dataKeys[i]);\n        }\n\n        return dataValues;\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) public virtual override onlyOwner {\n        _setData(dataKey, dataValue);\n    }\n\n    /**\n     * @inheritdoc IERC725Y\n     */\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues)\n        public\n        virtual\n        override\n        onlyOwner\n    {\n        require(dataKeys.length == dataValues.length, \"Keys length not equal to values length\");\n        for (uint256 i = 0; i < dataKeys.length; i = GasLib.uncheckedIncrement(i)) {\n            _setData(dataKeys[i], dataValues[i]);\n        }\n    }\n\n    /* Internal functions */\n\n    function _getData(bytes32 dataKey) internal view virtual returns (bytes memory dataValue) {\n        return store[dataKey];\n    }\n\n    function _setData(bytes32 dataKey, bytes memory dataValue) internal virtual {\n        store[dataKey] = dataValue;\n        emit DataChanged(dataKey);\n    }\n\n    /* Overrides functions */\n\n    /**\n     * @inheritdoc ERC165\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IERC165, ERC165)\n        returns (bool)\n    {\n        return interfaceId == _INTERFACEID_ERC725Y || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4DigitalAssetMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// modules\nimport {ERC725Y} from \"@erc725/smart-contracts/contracts/ERC725Y.sol\";\n\n// constants\nimport \"./LSP4Constants.sol\";\n\n// errors\nimport {LSP4TokenNameNotEditable, LSP4TokenSymbolNotEditable} from \"./LSP4Errors.sol\";\n\n/**\n * @title LSP4DigitalAssetMetadata\n * @author Matthew Stevens\n * @dev Implementation of a LSP8 compliant contract.\n */\nabstract contract LSP4DigitalAssetMetadata is ERC725Y {\n    /**\n     * @notice Sets the name, symbol of the token and the owner, and sets the SupportedStandards:LSP4DigitalAsset key\n     * @param name_ The name of the token\n     * @param symbol_ The symbol of the token\n     * @param newOwner_ The owner of the token contract\n     */\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        address newOwner_\n    ) ERC725Y(newOwner_) {\n        // set key SupportedStandards:LSP4DigitalAsset\n        super._setData(_LSP4_SUPPORTED_STANDARDS_KEY, _LSP4_SUPPORTED_STANDARDS_VALUE);\n\n        super._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\n        super._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\n    }\n\n    /**\n     * @dev the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed via this function\n     *      once the digital asset contract has been deployed\n     */\n    function _setData(bytes32 key, bytes memory value) internal virtual override {\n        if (key == _LSP4_TOKEN_NAME_KEY) {\n            revert LSP4TokenNameNotEditable();\n        } else if (key == _LSP4_TOKEN_SYMBOL_KEY) {\n            revert LSP4TokenSymbolNotEditable();\n        } else {\n            super._setData(key, value);\n        }\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7DigitalAssetCore.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {ILSP1UniversalReceiver} from \"../LSP1UniversalReceiver/ILSP1UniversalReceiver.sol\";\nimport {ILSP7DigitalAsset} from \"./ILSP7DigitalAsset.sol\";\n\n// libraries\nimport {ERC165Checker} from \"../Custom/ERC165Checker.sol\";\n\n// modules\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ERC725Y} from \"@erc725/smart-contracts/contracts/ERC725Y.sol\";\n\n// errors\nimport \"./LSP7Errors.sol\";\n\n// constants\nimport {_INTERFACEID_LSP1} from \"../LSP1UniversalReceiver/LSP1Constants.sol\";\nimport {_TYPEID_LSP7_TOKENSSENDER, _TYPEID_LSP7_TOKENSRECIPIENT} from \"./LSP7Constants.sol\";\n\n/**\n * @title LSP7DigitalAsset contract\n * @author Matthew Stevens\n * @dev Core Implementation of a LSP7 compliant contract.\n *\n * This contract implement the core logic of the functions for the {ILSP7DigitalAsset} interface.\n */\nabstract contract LSP7DigitalAssetCore is Context, ILSP7DigitalAsset {\n    using Address for address;\n\n    // --- Storage\n\n    bool internal _isNFT;\n\n    uint256 internal _existingTokens;\n\n    // Mapping from `tokenOwner` to an `amount` of tokens\n    mapping(address => uint256) internal _tokenOwnerBalances;\n\n    // Mapping a `tokenOwner` to an `operator` to `amount` of tokens.\n    mapping(address => mapping(address => uint256)) internal _operatorAuthorizedAmount;\n\n    // --- Token queries\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function decimals() public view override returns (uint256) {\n        return _isNFT ? 0 : 18;\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _existingTokens;\n    }\n\n    // --- Token owner queries\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function balanceOf(address tokenOwner) public view override returns (uint256) {\n        return _tokenOwnerBalances[tokenOwner];\n    }\n\n    // --- Operator functionality\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function authorizeOperator(address operator, uint256 amount) public virtual override {\n        _updateOperator(_msgSender(), operator, amount);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function revokeOperator(address operator) public virtual override {\n        _updateOperator(_msgSender(), operator, 0);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function isOperatorFor(address operator, address tokenOwner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        if (tokenOwner == operator) {\n            return _tokenOwnerBalances[tokenOwner];\n        } else {\n            return _operatorAuthorizedAmount[tokenOwner][operator];\n        }\n    }\n\n    // --- Transfer functionality\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) public virtual override {\n        address operator = _msgSender();\n        if (operator != from) {\n            uint256 operatorAmount = _operatorAuthorizedAmount[from][operator];\n            if (amount > operatorAmount) {\n                revert LSP7AmountExceedsAuthorizedAmount(from, operatorAmount, operator, amount);\n            }\n\n            _updateOperator(from, operator, operatorAmount - amount);\n        }\n\n        _transfer(from, to, amount, force, data);\n    }\n\n    /**\n     * @inheritdoc ILSP7DigitalAsset\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool force,\n        bytes[] memory data\n    ) public virtual override {\n        if (\n            from.length != to.length || from.length != amount.length || from.length != data.length\n        ) {\n            revert LSP7InvalidTransferBatch();\n        }\n\n        for (uint256 i = 0; i < from.length; i++) {\n            // using the public transfer function to handle updates to operator authorized amounts\n            transfer(from[i], to[i], amount[i], force, data[i]);\n        }\n    }\n\n    /**\n     * @dev Changes token `amount` the `operator` has access to from `tokenOwner` tokens. If the\n     * amount is zero then the operator is being revoked, otherwise the operator amount is being\n     * modified.\n     *\n     * See {isOperatorFor}.\n     *\n     * Emits either {AuthorizedOperator} or {RevokedOperator} event.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _updateOperator(\n        address tokenOwner,\n        address operator,\n        uint256 amount\n    ) internal virtual {\n        if (operator == address(0)) {\n            revert LSP7CannotUseAddressZeroAsOperator();\n        }\n\n        // tokenOwner is always their own operator, no update required\n        if (operator == tokenOwner) {\n            return;\n        }\n\n        _operatorAuthorizedAmount[tokenOwner][operator] = amount;\n\n        if (amount != 0) {\n            emit AuthorizedOperator(operator, tokenOwner, amount);\n        } else {\n            emit RevokedOperator(operator, tokenOwner);\n        }\n    }\n\n    /**\n     * @dev Mints `amount` tokens and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (to == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(address(0), to, amount);\n\n        _tokenOwnerBalances[to] += amount;\n\n        emit Transfer(operator, address(0), to, amount, force, data);\n\n        _notifyTokenReceiver(address(0), to, amount, force, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(\n        address from,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (from == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        uint256 balance = _tokenOwnerBalances[from];\n        if (amount > balance) {\n            revert LSP7AmountExceedsBalance(balance, from, amount);\n        }\n\n        address operator = _msgSender();\n        if (operator != from) {\n            uint256 authorizedAmount = _operatorAuthorizedAmount[from][operator];\n            if (amount > authorizedAmount) {\n                revert LSP7AmountExceedsAuthorizedAmount(from, authorizedAmount, operator, amount);\n            }\n            _operatorAuthorizedAmount[from][operator] -= amount;\n        }\n\n        _beforeTokenTransfer(from, address(0), amount);\n\n        _tokenOwnerBalances[from] -= amount;\n\n        emit Transfer(operator, from, address(0), amount, false, data);\n\n        _notifyTokenSender(from, address(0), amount, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (from == address(0) || to == address(0)) {\n            revert LSP7CannotSendWithAddressZero();\n        }\n\n        uint256 balance = _tokenOwnerBalances[from];\n        if (amount > balance) {\n            revert LSP7AmountExceedsBalance(balance, from, amount);\n        }\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(from, to, amount);\n\n        _tokenOwnerBalances[from] -= amount;\n        _tokenOwnerBalances[to] += amount;\n\n        emit Transfer(operator, from, to, amount, force, data);\n\n        _notifyTokenSender(from, to, amount, data);\n        _notifyTokenReceiver(from, to, amount, force, data);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `amount` tokens will be\n     * transferred to `to`.\n     * - When `from` is zero, `amount` tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s `amount` tokens will be burned.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        // tokens being minted\n        if (from == address(0)) {\n            _existingTokens += amount;\n        }\n\n        // tokens being burned\n        if (to == address(0)) {\n            _existingTokens -= amount;\n        }\n    }\n\n    /**\n     * @dev An attempt is made to notify the token sender about the `amount` tokens changing owners using\n     * LSP1 interface.\n     */\n    function _notifyTokenSender(\n        address from,\n        address to,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        if (ERC165Checker.supportsERC165Interface(from, _INTERFACEID_LSP1)) {\n            bytes memory packedData = abi.encodePacked(from, to, amount, data);\n            ILSP1UniversalReceiver(from).universalReceiver(_TYPEID_LSP7_TOKENSSENDER, packedData);\n        }\n    }\n\n    /**\n     * @dev An attempt is made to notify the token receiver about the `amount` tokens changing owners\n     * using LSP1 interface. When force is FALSE the token receiver MUST support LSP1.\n     *\n     * The receiver may revert when the token being sent is not wanted.\n     */\n    function _notifyTokenReceiver(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) internal virtual {\n        if (ERC165Checker.supportsERC165Interface(to, _INTERFACEID_LSP1)) {\n            bytes memory packedData = abi.encodePacked(from, to, amount, data);\n            ILSP1UniversalReceiver(to).universalReceiver(_TYPEID_LSP7_TOKENSRECIPIENT, packedData);\n        } else if (!force) {\n            if (to.code.length != 0) {\n                revert LSP7NotifyTokenReceiverContractMissingLSP1Interface(to);\n            } else {\n                revert LSP7NotifyTokenReceiverIsEOA(to);\n            }\n        }\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Constants.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP7 = 0xe33f65c3;\n\n// --- Token Hooks\n\n// keccak256('LSP7TokensSender')\nbytes32 constant _TYPEID_LSP7_TOKENSSENDER = 0x40b8bec57d7b5ff0dbd9e9acd0a47dfeb0101e1a203766f5ccab00445fbf39e9;\n\n// keccak256('LSP7TokensRecipient')\nbytes32 constant _TYPEID_LSP7_TOKENSRECIPIENT = 0xdbe2c314e1aee2970c72666f2ebe8933a8575263ea71e5ff6a9178e95d47a26f;\n"
    },
    "@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @title The interface for ERC725Y General data key/value store\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\n * from/to the contract storage\n */\ninterface IERC725Y is IERC165 {\n    /**\n     * @notice Emitted when data at a key is changed\n     * @param dataKey The data key which value is set\n     */\n    event DataChanged(bytes32 indexed dataKey);\n\n    /**\n     * @notice Gets singular data at a given `dataKey`\n     * @param dataKey The key which value to retrieve\n     * @return dataValue The data stored at the key\n     */\n    function getData(bytes32 dataKey) external view returns (bytes memory dataValue);\n\n    /**\n     * @notice Gets array of data for multiple given keys\n     * @param dataKeys The array of keys which values to retrieve\n     * @return dataValues The array of data stored at multiple keys\n     */\n    function getData(bytes32[] memory dataKeys) external view returns (bytes[] memory dataValues);\n\n    /**\n     * @notice Sets singular data for a given `dataKey`\n     * @param dataKey The key to retrieve stored value\n     * @param dataValue The value to set\n     * SHOULD only be callable by the owner of the contract set via ERC173\n     *\n     * Emits a {DataChanged} event.\n     */\n    function setData(bytes32 dataKey, bytes memory dataValue) external;\n\n    /**\n     * @param dataKeys The array of data keys for values to set\n     * @param dataValues The array of values to set\n     * @dev Sets array of data for multiple given `dataKeys`\n     * SHOULD only be callable by the owner of the contract set via ERC173\n     *\n     * Emits a {DataChanged} event.\n     */\n    function setData(bytes32[] memory dataKeys, bytes[] memory dataValues) external;\n}\n"
    },
    "@erc725/smart-contracts/contracts/utils/GasLib.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Library to add all efficient functions that could get repeated.\n */\nlibrary GasLib {\n    /**\n     * @dev Will return unchecked incremented uint256\n     */\n    function uncheckedIncrement(uint256 i) internal pure returns (uint256) {\n        unchecked {\n            return i + 1;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@erc725/smart-contracts/contracts/custom/OwnableUnset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title OwnableUnset\n * @dev modified version of OpenZeppelin implementation, where:\n * - _setOwner(address) function is internal, so this function can be used in constructor\n * of contracts implementation (instead of using transferOwnership(address)\n * - the contract does not inherit from Context contract\n */\nabstract contract OwnableUnset {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Changes the owner if `newOwner` and oldOwner are different\n     * This pattern is useful in inheritance.\n     */\n    function _setOwner(address newOwner) internal virtual {\n        if (newOwner != owner()) {\n            address oldOwner = _owner;\n            _owner = newOwner;\n            emit OwnershipTransferred(oldOwner, newOwner);\n        }\n    }\n}\n"
    },
    "@erc725/smart-contracts/contracts/constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// >> ERC165 INTERFACE IDs\n\n// ERC725 - Smart Contract based Account\nbytes4 constant _INTERFACEID_ERC725X = 0x44c028fe;\nbytes4 constant _INTERFACEID_ERC725Y = 0x714df77c;\n\n// >> ERC725X OPERATIONS TYPES\nuint256 constant OPERATION_CALL = 0;\nuint256 constant OPERATION_CREATE = 1;\nuint256 constant OPERATION_CREATE2 = 2;\nuint256 constant OPERATION_STATICCALL = 3;\nuint256 constant OPERATION_DELEGATECALL = 4;\n\n// ERC725Y overloaded function selectors\nbytes4 constant SETDATA_SELECTOR = bytes4(keccak256(\"setData(bytes32,bytes)\"));\nbytes4 constant SETDATA_ARRAY_SELECTOR = bytes4(keccak256(\"setData(bytes32[],bytes[])\"));\n"
    },
    "@erc725/smart-contracts/contracts/ERC725Y.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// modules\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {OwnableUnset} from \"./custom/OwnableUnset.sol\";\nimport {ERC725YCore} from \"./ERC725YCore.sol\";\n\n/**\n * @title ERC725Y General data key/value store\n * @author Fabian Vogelsteller <fabian@lukso.network>\n * @dev Contract module which provides the ability to set arbitrary data key/value pairs that can be changed over time\n * It is intended to standardise certain data key/value pairs to allow automated read and writes\n * from/to the contract storage\n */\ncontract ERC725Y is ERC725YCore {\n    /**\n     * @notice Sets the owner of the contract\n     * @param newOwner the owner of the contract\n     */\n    constructor(address newOwner) {\n        OwnableUnset._setOwner(newOwner);\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Constants.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// --- ERC725Y entries\n\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\n\n// bytes4(keccak256('LSP4DigitalAsset'))\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\"a4d96624\";\n\n// keccak256('LSP4TokenName')\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\n\n// keccak256('LSP4TokenSymbol')\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\n\n// keccak256('LSP4Creators[]')\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\n\n// bytes10(keccak256('LSP4CreatorsMap')) + bytes2(0)\nbytes12 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da00000;\n\n// keccak256('LSP4Metadata')\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP4DigitalAssetMetadata/LSP4Errors.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.\n *      The `LSP4TokenName` data key is located inside the ERC725Y key-value store of the digital asset contract.\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\n */\nerror LSP4TokenNameNotEditable();\n\n/**\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.\n *      The `LSP4TokenSymbol` data key is located inside the ERC725Y key-value store of the digital asset contract.\n *      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed.\n */\nerror LSP4TokenSymbolNotEditable();\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/ILSP1UniversalReceiver.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n/**\n * @title The interface for LSP1UniversalReceiver\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received\n */\ninterface ILSP1UniversalReceiver {\n    /**\n     * @notice Emitted when the universalReceiver function is succesfully executed\n     * @param from The address calling the universalReceiver function\n     * @param value The amount sent to the universalReceiver function\n     * @param typeId The hash of a specific standard or a hook\n     * @param returnedValue The return value of universalReceiver function\n     * @param receivedData The arbitrary data passed to universalReceiver function\n     */\n    event UniversalReceiver(\n        address indexed from,\n        uint256 value,\n        bytes32 indexed typeId,\n        bytes indexed returnedValue,\n        bytes receivedData\n    );\n\n    /**\n     * @param typeId The hash of a specific standard or a hook\n     * @param data The arbitrary data received with the call\n     * @dev Emits an event when it's succesfully executed\n     *\n     * Call the universalReceiverDelegate function in the UniversalReceiverDelegate (URD) contract, if the address of the URD\n     * was set as a value for the `_UniversalReceiverKey` in the account key/value value store of the same contract implementing\n     * the universalReceiver function and if the URD contract has the LSP1UniversalReceiverDelegate Interface Id registred using ERC165\n     *\n     * Emits a {UniversalReceiver} event\n     */\n    function universalReceiver(bytes32 typeId, bytes calldata data)\n        external\n        payable\n        returns (bytes memory);\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/ILSP7DigitalAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport {IERC725Y} from \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\";\n\n/**\n * @dev Required interface of a LSP8 compliant contract.\n */\ninterface ILSP7DigitalAsset is IERC165, IERC725Y {\n    // --- Events\n\n    /**\n     * @dev Emitted when `amount` tokens is transferred from `from` to `to`.\n     * @param operator The address of operator sending tokens\n     * @param from The address which tokens are sent\n     * @param to The receiving address\n     * @param amount The amount of tokens transferred\n     * @param force When set to TRUE, `to` may be any address but\n     * when set to FALSE `to` must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses\n     */\n    event Transfer(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256 amount,\n        bool force,\n        bytes data\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` enables `operator` for `amount` tokens.\n     * @param operator The address authorized as an operator\n     * @param tokenOwner The token owner\n     * @param amount The amount of tokens `operator` address has access to from `tokenOwner`\n     */\n    event AuthorizedOperator(\n        address indexed operator,\n        address indexed tokenOwner,\n        uint256 indexed amount\n    );\n\n    /**\n     * @dev Emitted when `tokenOwner` disables `operator` for `amount` tokens.\n     * @param operator The address revoked from operating\n     * @param tokenOwner The token owner\n     */\n    event RevokedOperator(address indexed operator, address indexed tokenOwner);\n\n    // --- Token queries\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation\n     * If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {balanceOf} and {transfer}.\n     */\n    function decimals() external view returns (uint256);\n\n    /**\n     * @dev Returns the number of existing tokens.\n     * @return The number of existing tokens\n     */\n    function totalSupply() external view returns (uint256);\n\n    // --- Token owner queries\n\n    /**\n     * @dev Returns the number of tokens owned by `tokenOwner`.\n     * @param tokenOwner The address to query\n     * @return The number of tokens owned by this address\n     */\n    function balanceOf(address tokenOwner) external view returns (uint256);\n\n    // --- Operator functionality\n\n    /**\n     * @param operator The address to authorize as an operator.\n     * @param amount The amount of tokens operator has access to.\n     * @dev Sets `amount` as the amount of tokens `operator` address has access to from callers tokens.\n     *\n     * See {isOperatorFor}.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be the zero address.\n     *\n     * Emits an {AuthorizedOperator} event.\n     */\n    function authorizeOperator(address operator, uint256 amount) external;\n\n    /**\n     * @param operator The address to revoke as an operator.\n     * @dev Removes `operator` address as an operator of callers tokens.\n     *\n     * See {isOperatorFor}.\n     *\n     * Requirements\n     *\n     * - `operator` cannot be the zero address.\n     *\n     * Emits a {RevokedOperator} event.\n     */\n    function revokeOperator(address operator) external;\n\n    /**\n     * @param operator The address to query operator status for.\n     * @param tokenOwner The token owner.\n     * @return The amount of tokens `operator` address has access to from `tokenOwner`.\n     * @dev Returns amount of tokens `operator` address has access to from `tokenOwner`.\n     * Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own\n     * operator.\n     */\n    function isOperatorFor(address operator, address tokenOwner) external view returns (uint256);\n\n    // --- Transfer functionality\n\n    /**\n     * @param from The sending address.\n     * @param to The receiving address.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to TRUE, to may be any address but\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @dev Transfers `amount` of tokens from `from` to `to`. The `force` parameter will be used\n     * when notifying the token sender and receiver.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `amount` tokens must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(\n        address from,\n        address to,\n        uint256 amount,\n        bool force,\n        bytes memory data\n    ) external;\n\n    /**\n     * @param from The list of sending addresses.\n     * @param to The list of receiving addresses.\n     * @param amount The amount of tokens to transfer.\n     * @param force When set to TRUE, to may be any address but\n     * when set to FALSE to must be a contract that supports LSP1 UniversalReceiver\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\n     *\n     * @dev Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails\n     * the call will revert.\n     *\n     * Requirements:\n     *\n     * - `from`, `to`, `amount` lists are the same length.\n     * - no values in `from` can be the zero address.\n     * - no values in `to` can be the zero address.\n     * - each `amount` tokens must be owned by `from`.\n     * - If the caller is not `from`, it must be an operator for `from` with access to at least\n     * `amount` tokens.\n     *\n     * Emits {Transfer} events.\n     */\n    function transferBatch(\n        address[] memory from,\n        address[] memory to,\n        uint256[] memory amount,\n        bool force,\n        bytes[] memory data\n    ) external;\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/Custom/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\n// This contract is a modified version of OpenZeppelin implementation, where we modify the visibility of\n// `supportsERC165Interface`, which check the given interfaceId, to internal and to be used in contract implementations,\n// instead of `supportsInterface` to save gas, as the latter check for 3 interfaceIds; InterfaceId of ERC165, 0xffffffff\n// and the given interfaceId.\n\n// interfaces\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool)\n    {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165Interface(address account, bytes4 interfaceId)\n        internal\n        view\n        returns (bool)\n    {\n        bytes memory encodedParams = abi.encodeWithSelector(\n            IERC165.supportsInterface.selector,\n            interfaceId\n        );\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP7DigitalAsset/LSP7Errors.sol": {
      "content": "// SPDX-License-Identifier: CC0-1.0\npragma solidity ^0.8.0;\n\n// --- Errors\n\nerror LSP7AmountExceedsBalance(uint256 balance, address tokenOwner, uint256 amount);\n\nerror LSP7AmountExceedsAuthorizedAmount(\n    address tokenOwner,\n    uint256 authorizedAmount,\n    address operator,\n    uint256 amount\n);\n\nerror LSP7CannotUseAddressZeroAsOperator();\n\nerror LSP7CannotSendWithAddressZero();\n\nerror LSP7InvalidTransferBatch();\n\nerror LSP7NotifyTokenReceiverContractMissingLSP1Interface(address tokenReceiver);\n\nerror LSP7NotifyTokenReceiverIsEOA(address tokenReceiver);\n"
    },
    "@lukso/lsp-smart-contracts/contracts/LSP1UniversalReceiver/LSP1Constants.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity ^0.8.0;\n\n// --- ERC165 interface ids\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\n\n// --- ERC725Y Keys\n\n// keccak256('LSP1UniversalReceiverDelegate')\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}